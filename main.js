(()=>{"use strict";function t(t,a){!function(t,n){const a=document.querySelectorAll(".nav_todo-lists")[0];a.querySelectorAll(".nav_todo-lists_li"),a.innerHTML="";for(var o=0;o<t.length;o++){const e=document.createElement("li");e.setAttribute("class","nav_todo-lists_li"),e.setAttribute("data-todo-list",`${o}`),e.textContent=`${t[o].name}`,t[o]==t[n]&&(e.style.fontWeight="bold"),a.appendChild(e)}e("Add new","nav_add-new",a)}(t,a),n(t,a),function(t){document.querySelectorAll(".main_delete")[0],0==t?(document.querySelectorAll(".main_delete")[0].classList.add("display-none"),document.querySelectorAll(".main_delete")[0].setAttribute("data-todo-list",`${t}`)):(document.querySelectorAll(".main_delete")[0].classList.remove("display-none"),document.querySelectorAll(".main_delete")[0].setAttribute("data-todo-list",`${t}`))}(a)}function e(t,n,a){const o=document.createElement("button");return o.setAttribute("class",n),o.textContent=`${t}`,a.appendChild(o),e}function n(t,e){a(".main_table_row"),a(".main_table_title_finished"),function(t,e){document.querySelectorAll(".main_top_title")[0].textContent=`${t[e].name}`}(t,e);const n=document.querySelectorAll(".main_table")[0];n.setAttribute("data-todo-list",`${e}`);for(var o=0;o<t[e].todos.length;o++)if(0==t[e].todos[o].finished){const a=document.createElement("li");a.classList.add("main_table_row");const i=document.createElement("div");i.classList.add("main_table_column-0");const r=document.createElement("img");r.setAttribute("src","img/checkbox-blank.svg"),r.classList.add("main_checkbox"),r.setAttribute("data-todo",`${o}`);const s=document.createElement("div");s.textContent=`${t[e].todos[o].title}`,s.classList.add("main_table_column-1"),s.setAttribute("data-todo",`${o}`);const d=document.createElement("div");d.textContent=`${t[e].todos[o].dueDate}`,d.classList.add("main_table_column-2"),d.setAttribute("data-todo",`${o}`);const l=document.createElement("div");l.textContent=`${t[e].todos[o].priority}`,l.setAttribute("class","main_table_column-3"),l.setAttribute("data-todo",`${o}`),n.appendChild(a),a.appendChild(i),i.appendChild(r),a.appendChild(s),a.appendChild(d),a.appendChild(l)}if(t[e].todos.some((t=>1==t.finished))){const t=document.querySelectorAll(".main_table")[0],e=document.createElement("p");e.classList.add("main_table_title_finished"),e.textContent="Finished:",t.appendChild(e)}for(o=0;o<t[e].todos.length;o++)if(1==t[e].todos[o].finished){const n=document.querySelectorAll(".main_table")[0];n.setAttribute("data-todo-list",`${e}`);const a=document.createElement("li");a.setAttribute("class","main_table_row"),a.classList.add("finished");const i=document.createElement("div");i.setAttribute("class","main_table_column-0");const r=document.createElement("img");r.setAttribute("src","img/checkbox.svg"),r.setAttribute("class","main_checkbox"),r.setAttribute("data-todo",`${o}`);const s=document.createElement("div");s.textContent=`${t[e].todos[o].title}`,s.classList.add("main_table_column-1","pointer"),s.setAttribute("data-todo",`${o}`);const d=document.createElement("div");d.textContent=`${t[e].todos[o].dueDate}`,d.setAttribute("class","main_table_column-2"),d.setAttribute("data-todo",`${o}`);const l=document.createElement("div");l.textContent=`${t[e].todos[o].priority}`,l.setAttribute("class","main_table_column-3"),l.setAttribute("data-todo",`${o}`),n.appendChild(a),a.appendChild(i),i.appendChild(r),a.appendChild(s),a.appendChild(d),a.appendChild(l)}}function a(t){document.querySelectorAll(t).forEach((t=>{t.remove()}))}function o(){document.getElementsByClassName("modal")[0].classList.add("display-none");const t=document.getElementsByClassName("modal_window_subtask");for(;t.length>0;)t[0].parentNode.removeChild(t[0])}function i(){document.getElementsByClassName("modal_new")[0].classList.add("display-none"),function(){document.getElementById("modal_new_form_title").value="",document.getElementById("modal_new_form_description").value="",document.getElementById("modal_new_form_due-date").value="",document.getElementById("modal_new_form_priority").value="Normal",document.getElementById("modal_new_form_notes").value="";const t=document.getElementsByClassName("modal_new_window_header_subtask")[0];t.classList.contains("display-none")||t.classList.add("display-none"),Array.from(document.getElementsByClassName("modal_new_window_subtask")).forEach((t=>{t.remove()}))}(),r()}function r(){document.getElementsByClassName("modal_new_window_error")[0].textContent="";const t=document.getElementById("modal_new_form_title"),e=document.getElementById("modal_new_form_due-date");t.style.backgroundColor="",e.style.backgroundColor=""}function s(t){const e=document.getElementsByClassName("modal_new_window_subtask")[t].getAttribute("data-finished"),n=document.getElementsByClassName("modal_new_window_subtask_checkbox")[t];"false"==e&&(document.getElementsByClassName("modal_new_window_subtask")[t].classList.add("finished"),document.getElementsByClassName("modal_new_window_subtask")[t].setAttribute("data-finished",!0),n.setAttribute("src","img/checkbox.svg")),"true"==e&&(document.getElementsByClassName("modal_new_window_subtask")[t].classList.remove("finished"),document.getElementsByClassName("modal_new_window_subtask")[t].setAttribute("data-finished",!1),n.setAttribute("src","img/checkbox-blank.svg"))}function d(t){const e=document.getElementsByClassName("modal_window_subtask")[t].getAttribute("data-finished"),n=document.getElementsByClassName("modal_window_subtask_checkbox")[t];"false"==e&&(document.getElementsByClassName("modal_window_subtask")[t].classList.add("finished"),document.getElementsByClassName("modal_window_subtask")[t].setAttribute("data-finished",!0),n.setAttribute("src","img/checkbox.svg")),"true"==e&&(document.getElementsByClassName("modal_window_subtask")[t].classList.remove("finished"),document.getElementsByClassName("modal_window_subtask")[t].setAttribute("data-finished",!1),n.setAttribute("src","img/checkbox-blank.svg"))}function l(t,e,n){const a=[],o=document.getElementsByClassName("modal_window_subtask");for(var i of o){const t=i.getElementsByClassName("modal_window_subtask_text")[0].textContent,e=i.getAttribute("data-finished"),n={};n.text=t,n.finished=e,a.push(n)}t[e].todos[n].subtasks=a}function u(){const t=document.getElementsByClassName("modal_edit")[0],e=document.getElementsByClassName("modal_edit_window_subtask");for(;e.length>0;)e[0].parentNode.removeChild(e[0]);t.classList.add("display-none")}function c(t){const e=document.getElementsByClassName("modal_edit_window_subtask")[t].getAttribute("data-finished"),n=document.getElementsByClassName("modal_edit_window_subtask_checkbox")[t];"false"==e&&(document.getElementsByClassName("modal_edit_window_subtask")[t].classList.add("finished"),document.getElementsByClassName("modal_edit_window_subtask")[t].setAttribute("data-finished",!0),n.setAttribute("src","img/checkbox.svg")),"true"==e&&(document.getElementsByClassName("modal_edit_window_subtask")[t].classList.remove("finished"),document.getElementsByClassName("modal_edit_window_subtask")[t].setAttribute("data-finished",!1),n.setAttribute("src","img/checkbox-blank.svg"))}function m(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function f(t){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f(t)}function g(t){return m(1,arguments),t instanceof Date||"object"===f(t)&&"[object Date]"===Object.prototype.toString.call(t)}function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}function w(t){m(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===h(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function b(t){if(m(1,arguments),!g(t)&&"number"!=typeof t)return!1;var e=w(t);return!isNaN(Number(e))}function _(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function v(t,e){m(2,arguments);var n=w(t).getTime(),a=_(e);return new Date(n+a)}function y(t,e){m(2,arguments);var n=_(e);return v(t,-n)}var p=864e5;function C(t){m(1,arguments);var e=1,n=w(t),a=n.getUTCDay(),o=(a<e?7:0)+a-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function k(t){m(1,arguments);var e=w(t),n=e.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var o=C(a),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var r=C(i);return e.getTime()>=o.getTime()?n+1:e.getTime()>=r.getTime()?n:n-1}function E(t){m(1,arguments);var e=k(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var a=C(n);return a}var N=6048e5,x={};function B(){return x}function T(t,e){var n,a,o,i,r,s,d,l;m(1,arguments);var u=B(),c=_(null!==(n=null!==(a=null!==(o=null!==(i=null==e?void 0:e.weekStartsOn)&&void 0!==i?i:null==e||null===(r=e.locale)||void 0===r||null===(s=r.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==o?o:u.weekStartsOn)&&void 0!==a?a:null===(d=u.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==n?n:0);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=w(t),g=f.getUTCDay(),h=(g<c?7:0)+g-c;return f.setUTCDate(f.getUTCDate()-h),f.setUTCHours(0,0,0,0),f}function A(t,e){var n,a,o,i,r,s,d,l;m(1,arguments);var u=w(t),c=u.getUTCFullYear(),f=B(),g=_(null!==(n=null!==(a=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(r=e.locale)||void 0===r||null===(s=r.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:f.firstWeekContainsDate)&&void 0!==a?a:null===(d=f.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1);if(!(g>=1&&g<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(c+1,0,g),h.setUTCHours(0,0,0,0);var b=T(h,e),v=new Date(0);v.setUTCFullYear(c,0,g),v.setUTCHours(0,0,0,0);var y=T(v,e);return u.getTime()>=b.getTime()?c+1:u.getTime()>=y.getTime()?c:c-1}function D(t,e){var n,a,o,i,r,s,d,l;m(1,arguments);var u=B(),c=_(null!==(n=null!==(a=null!==(o=null!==(i=null==e?void 0:e.firstWeekContainsDate)&&void 0!==i?i:null==e||null===(r=e.locale)||void 0===r||null===(s=r.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==o?o:u.firstWeekContainsDate)&&void 0!==a?a:null===(d=u.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1),f=A(t,e),g=new Date(0);g.setUTCFullYear(f,0,c),g.setUTCHours(0,0,0,0);var h=T(g,e);return h}var M=6048e5;function L(t,e){for(var n=t<0?"-":"",a=Math.abs(t).toString();a.length<e;)a="0"+a;return n+a}const S=function(t,e){var n=t.getUTCFullYear(),a=n>0?n:1-n;return L("yy"===e?a%100:a,e.length)},U=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):L(n+1,2)},P=function(t,e){return L(t.getUTCDate(),e.length)},W=function(t,e){return L(t.getUTCHours()%12||12,e.length)},Y=function(t,e){return L(t.getUTCHours(),e.length)},q=function(t,e){return L(t.getUTCMinutes(),e.length)},I=function(t,e){return L(t.getUTCSeconds(),e.length)},$=function(t,e){var n=e.length,a=t.getUTCMilliseconds();return L(Math.floor(a*Math.pow(10,n-3)),e.length)};function O(t,e){var n=t>0?"-":"+",a=Math.abs(t),o=Math.floor(a/60),i=a%60;if(0===i)return n+String(o);var r=e||"";return n+String(o)+r+L(i,2)}function F(t,e){return t%60==0?(t>0?"-":"+")+L(Math.abs(t)/60,2):H(t,e)}function H(t,e){var n=e||"",a=t>0?"-":"+",o=Math.abs(t);return a+L(Math.floor(o/60),2)+n+L(o%60,2)}const z={G:function(t,e,n){var a=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var a=t.getUTCFullYear(),o=a>0?a:1-a;return n.ordinalNumber(o,{unit:"year"})}return S(t,e)},Y:function(t,e,n,a){var o=A(t,a),i=o>0?o:1-o;return"YY"===e?L(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):L(i,e.length)},R:function(t,e){return L(k(t),e.length)},u:function(t,e){return L(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return L(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return L(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){var a=t.getUTCMonth();switch(e){case"M":case"MM":return U(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){var a=t.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return L(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){var o=function(t,e){m(1,arguments);var n=w(t),a=T(n,e).getTime()-D(n,e).getTime();return Math.round(a/M)+1}(t,a);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):L(o,e.length)},I:function(t,e,n){var a=function(t){m(1,arguments);var e=w(t),n=C(e).getTime()-E(e).getTime();return Math.round(n/N)+1}(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):L(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):P(t,e)},D:function(t,e,n){var a=function(t){m(1,arguments);var e=w(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var a=e.getTime(),o=n-a;return Math.floor(o/p)+1}(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):L(a,e.length)},E:function(t,e,n){var a=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){var o=t.getUTCDay(),i=(o-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return L(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){var o=t.getUTCDay(),i=(o-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return L(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(t,e,n){var a=t.getUTCDay(),o=0===a?7:a;switch(e){case"i":return String(o);case"ii":return L(o,e.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){var a=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){var a,o=t.getUTCHours();switch(a=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){var a,o=t.getUTCHours();switch(a=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var a=t.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return W(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):Y(t,e)},K:function(t,e,n){var a=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):L(a,e.length)},k:function(t,e,n){var a=t.getUTCHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):L(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):q(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):I(t,e)},S:function(t,e){return $(t,e)},X:function(t,e,n,a){var o=(a._originalDate||t).getTimezoneOffset();if(0===o)return"Z";switch(e){case"X":return F(o);case"XXXX":case"XX":return H(o);default:return H(o,":")}},x:function(t,e,n,a){var o=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return F(o);case"xxxx":case"xx":return H(o);default:return H(o,":")}},O:function(t,e,n,a){var o=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+O(o,":");default:return"GMT"+H(o,":")}},z:function(t,e,n,a){var o=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+O(o,":");default:return"GMT"+H(o,":")}},t:function(t,e,n,a){var o=a._originalDate||t;return L(Math.floor(o.getTime()/1e3),e.length)},T:function(t,e,n,a){return L((a._originalDate||t).getTime(),e.length)}};var j=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},Q=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},G={p:Q,P:function(t,e){var n,a=t.match(/(P+)(p+)?/)||[],o=a[1],i=a[2];if(!i)return j(t,e);switch(o){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",j(o,e)).replace("{{time}}",Q(i,e))}};const R=G;function X(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}var J=["D","DD"],Z=["YY","YYYY"];function V(t){return-1!==J.indexOf(t)}function K(t){return-1!==Z.indexOf(t)}function tt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var et={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function nt(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,a=t.formats[n]||t.formats[t.defaultWidth];return a}}var at,ot={date:nt({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:nt({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:nt({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},it={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function rt(t){return function(e,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,i=null!=n&&n.width?String(n.width):o;a=t.formattingValues[i]||t.formattingValues[o]}else{var r=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;a=t.values[s]||t.values[r]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function st(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,o=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],i=e.match(o);if(!i)return null;var r,s=i[0],d=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],l=Array.isArray(d)?lt(d,(function(t){return t.test(s)})):dt(d,(function(t){return t.test(s)}));r=t.valueCallback?t.valueCallback(l):l,r=n.valueCallback?n.valueCallback(r):r;var u=e.slice(s.length);return{value:r,rest:u}}}function dt(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function lt(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const ut={code:"en-US",formatDistance:function(t,e,n){var a,o=et[t];return a="string"==typeof o?o:1===e?o.one:o.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:ot,formatRelative:function(t,e,n,a){return it[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:rt({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:rt({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:rt({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:rt({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:rt({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(at={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(at.matchPattern);if(!n)return null;var a=n[0],o=t.match(at.parsePattern);if(!o)return null;var i=at.valueCallback?at.valueCallback(o[0]):o[0];i=e.valueCallback?e.valueCallback(i):i;var r=t.slice(a.length);return{value:i,rest:r}}),era:st({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:st({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:st({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:st({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:st({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var ct=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,mt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ft=/^'([^]*?)'?$/,gt=/''/g,ht=/[a-zA-Z]/;function wt(t,e,n){var a,o,i,r,s,d,l,u,c,f,g,h,v,p,C,k,E,N;m(2,arguments);var x=String(e),T=B(),A=null!==(a=null!==(o=null==n?void 0:n.locale)&&void 0!==o?o:T.locale)&&void 0!==a?a:ut,D=_(null!==(i=null!==(r=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(l=n.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==s?s:T.firstWeekContainsDate)&&void 0!==r?r:null===(c=T.locale)||void 0===c||null===(f=c.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==i?i:1);if(!(D>=1&&D<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var M=_(null!==(g=null!==(h=null!==(v=null!==(p=null==n?void 0:n.weekStartsOn)&&void 0!==p?p:null==n||null===(C=n.locale)||void 0===C||null===(k=C.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==v?v:T.weekStartsOn)&&void 0!==h?h:null===(E=T.locale)||void 0===E||null===(N=E.options)||void 0===N?void 0:N.weekStartsOn)&&void 0!==g?g:0);if(!(M>=0&&M<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!A.localize)throw new RangeError("locale must contain localize property");if(!A.formatLong)throw new RangeError("locale must contain formatLong property");var L=w(t);if(!b(L))throw new RangeError("Invalid time value");var S=X(L),U=y(L,S),P={firstWeekContainsDate:D,weekStartsOn:M,locale:A,_originalDate:L},W=x.match(mt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,R[e])(t,A.formatLong):t})).join("").match(ct).map((function(a){if("''"===a)return"'";var o=a[0];if("'"===o)return bt(a);var i=z[o];if(i)return null!=n&&n.useAdditionalWeekYearTokens||!K(a)||tt(a,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!V(a)||tt(a,e,String(t)),i(U,a,A.localize,P);if(o.match(ht))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return a})).join("");return W}function bt(t){var e=t.match(ft);return e?e[1].replace(gt,"'"):t}Math.pow(10,8);var _t=36e5;function vt(t,e){var n;m(1,arguments);var a=_(null!==(n=null==e?void 0:e.additionalDigits)&&void 0!==n?n:2);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var o,i=Et(t);if(i.date){var r=Nt(i.date,a);o=xt(r.restDateString,r.year)}if(!o||isNaN(o.getTime()))return new Date(NaN);var s,d=o.getTime(),l=0;if(i.time&&(l=Tt(i.time),isNaN(l)))return new Date(NaN);if(!i.timezone){var u=new Date(d+l),c=new Date(0);return c.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),c.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),c}return s=Dt(i.timezone),isNaN(s)?new Date(NaN):new Date(d+l+s)}var yt={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},pt=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,Ct=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,kt=/^([+-])(\d{2})(?::?(\d{2}))?$/;function Et(t){var e,n={},a=t.split(yt.dateTimeDelimiter);if(a.length>2)return n;if(/:/.test(a[0])?e=a[0]:(n.date=a[0],e=a[1],yt.timeZoneDelimiter.test(n.date)&&(n.date=t.split(yt.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var o=yt.timezone.exec(e);o?(n.time=e.replace(o[1],""),n.timezone=o[1]):n.time=e}return n}function Nt(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),a=t.match(n);if(!a)return{year:NaN,restDateString:""};var o=a[1]?parseInt(a[1]):null,i=a[2]?parseInt(a[2]):null;return{year:null===i?o:100*i,restDateString:t.slice((a[1]||a[2]).length)}}function xt(t,e){if(null===e)return new Date(NaN);var n=t.match(pt);if(!n)return new Date(NaN);var a=!!n[4],o=Bt(n[1]),i=Bt(n[2])-1,r=Bt(n[3]),s=Bt(n[4]),d=Bt(n[5])-1;if(a)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,s,d)?function(t,e,n){var a=new Date(0);a.setUTCFullYear(t,0,4);var o=7*(e-1)+n+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+o),a}(e,s,d):new Date(NaN);var l=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(Mt[e]||(Lt(t)?29:28))}(e,i,r)&&function(t,e){return e>=1&&e<=(Lt(t)?366:365)}(e,o)?(l.setUTCFullYear(e,i,Math.max(o,r)),l):new Date(NaN)}function Bt(t){return t?parseInt(t):1}function Tt(t){var e=t.match(Ct);if(!e)return NaN;var n=At(e[1]),a=At(e[2]),o=At(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,a,o)?n*_t+6e4*a+1e3*o:NaN}function At(t){return t&&parseFloat(t.replace(",","."))||0}function Dt(t){if("Z"===t)return 0;var e=t.match(kt);if(!e)return 0;var n="+"===e[1]?-1:1,a=parseInt(e[2]),o=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,o)?n*(a*_t+6e4*o):NaN}var Mt=[31,null,31,30,31,30,31,31,30,31,30,31];function Lt(t){return t%400==0||t%4==0&&t%100!=0}class St{constructor(t){this.name=t,this.todos=[],Ut.push(this),Pt()}}let Ut=[];function Pt(){localStorage.setItem("todoListArray",JSON.stringify(Ut))}null==JSON.parse(localStorage.getItem("todoListArray"))?(Ut[0]=new St("Default"),localStorage.setItem("todoListArray",JSON.stringify(Ut))):Ut=JSON.parse(localStorage.getItem("todoListArray"));class Wt{constructor(t,e,n,a,o,i,r,s){this.title=t,this.description=e,this.dueDate=n,this.dueDateNonFormatted=a,this.priority=o,this.notes=i,this.finished=!1,this.subtasks=r,Ut[s].todos.push(this),Pt()}}window.onload=function(){t(Ut,0)},document.getElementsByClassName("header_logo")[0].addEventListener("click",(function(e){t(Ut,0)})),document.getElementsByClassName("nav_todo-lists")[0].addEventListener("click",(e=>{if("LI"==e.target.nodeName){const n=e.target.getAttribute("data-todo-list");t(Ut,n)}})),document.getElementsByClassName("nav_todo-lists")[0].addEventListener("click",(function(e){if("nav_add-new"==e.target.classList.value){const e=prompt("Name for Todo list?");if(null==e||""==e)return;Ut[Ut.length]=new St(e);const n=Ut.length-1;t(Ut,n)}})),document.getElementsByClassName("main_delete")[0].addEventListener("click",(e=>{const n=e.target.getAttribute("data-todo-list");confirm(`Are you sure you want to delete ${Ut[n].name}`)&&(Ut.splice(n),t(Ut,0),Pt())})),document.getElementsByClassName("main_table")[0].addEventListener("click",(function(t){if("main_checkbox"==t.target.classList.value){const e=document.getElementsByClassName("main_table")[0].getAttribute("data-todo-list"),a=t.target.attributes["data-todo"].value;!function(t,e,a){document.getElementsByClassName("main_checkbox")[a],document.getElementsByClassName("main_table_row")[a],0==t[e].todos[a].finished?t[e].todos[a].finished=!0:1==t[e].todos[a].finished&&(t[e].todos[a].finished=!1),n(t,e)}(Ut,e,a)}})),document.getElementsByClassName("main_table")[0].addEventListener("click",(function(t){if("main_table_column-1"==t.target.classList.value||"main_table_column-2"==t.target.classList.value||"main_table_column-3"==t.target.classList.value){const e=document.getElementsByClassName("main_table")[0].getAttribute("data-todo-list"),n=t.target.attributes["data-todo"].value;!function(t,e,n){document.getElementsByClassName("modal")[0].classList.remove("display-none"),function(t,e,n){const a=document.getElementsByClassName("modal_window")[0];a.setAttribute("data-todo-list",`${e}`),a.setAttribute("data-todo",`${n}`);let o=document.getElementsByClassName("modal_window_title")[0],i=document.getElementsByClassName("modal_window_description")[0],r=document.getElementsByClassName("modal_window_due-date")[0],s=document.getElementsByClassName("modal_window_priority")[0],d=document.getElementsByClassName("modal_window_notes")[0];if(0===t[e].todos[n].subtasks.length)document.getElementsByClassName("modal_window_header_subtask")[0].classList.add("display-none");else if(0!==t[e].todos[n].subtasks.length){document.getElementsByClassName("modal_window_header_subtask")[0].classList.remove("display-none");const a=document.getElementsByClassName("modal_window_subtask");for(;a.length>0;)a[0].parentNode.removeChild(a[0]);const o=document.getElementsByClassName("modal_window_middle")[0],i=t[e].todos[n].subtasks;for(let t=0;t<i.length;t++){const e=document.createElement("div");e.setAttribute("data-subtask",t),e.setAttribute("data-finished",i[t].finished),e.classList.add("modal_window_subtask");const n=document.createElement("img");n.setAttribute("src","img/checkbox-blank.svg"),n.setAttribute("data-subtask",t),n.classList.add("modal_window_subtask_checkbox"),e.appendChild(n);const a=document.createElement("p");a.classList.add("modal_window_subtask_text"),a.textContent=i[t].text,e.appendChild(a),"true"==i[t].finished&&(e.classList.add("finished"),n.setAttribute("src","img/checkbox.svg")),o.appendChild(e)}}o.textContent=`${t[e].todos[n].title}`,i.textContent=`${t[e].todos[n].description}`,r.textContent=`${t[e].todos[n].dueDate}`,s.textContent=`${t[e].todos[n].priority}`,d.textContent=`${t[e].todos[n].notes}`}(t,e,n)}(Ut,e,n)}})),document.getElementsByClassName("modal_window_close")[0].addEventListener("click",(function(e){const n=document.getElementsByClassName("modal_window")[0].getAttribute("data-todo-list"),a=document.getElementsByClassName("modal_window")[0].getAttribute("data-todo");l(Ut,n,a),t(Ut,n),o()})),document.addEventListener("click",(function(e){if("modal"==e.target.className){const e=document.getElementsByClassName("modal_window")[0].getAttribute("data-todo-list"),n=document.getElementsByClassName("modal_window")[0].getAttribute("data-todo");l(Ut,e,n),t(Ut,e),o()}})),document.getElementsByClassName("modal_window_delete")[0].addEventListener("click",(function(t){const e=document.getElementsByClassName("modal_window")[0].getAttribute("data-todo-list"),a=document.getElementsByClassName("modal_window")[0].getAttribute("data-todo");confirm("Are you sure?")&&(function(t,e,a){t[e].todos.splice(a,1),n(t,e),o()}(Ut,e,a),Pt())})),document.getElementsByClassName("main_new-task")[0].addEventListener("click",(function(t){document.getElementsByClassName("main_table")[0].getAttribute("data-todo-list"),document.getElementsByClassName("modal_new")[0].classList.remove("display-none")})),document.getElementsByClassName("modal_new_window_close")[0].addEventListener("click",(function(t){i()})),document.addEventListener("click",(function(t){"modal_new"==t.target.className&&i()})),document.getElementsByClassName("modal_new_window_add")[0].addEventListener("click",(function(e){if(function(){const t=document.getElementById("modal_new_form_title"),e=document.getElementById("modal_new_form_due-date");return""!=t.value&&""!=e.value||(document.getElementsByClassName("modal_new_window_error")[0].textContent="Please, fill the fields",""==t.value&&(t.style.backgroundColor="pink"),""==e.value&&(e.style.backgroundColor="pink"),!1)}()){const e=document.getElementById("modal_new_form_title").value,a=document.getElementById("modal_new_form_description").value,o=document.getElementById("modal_new_form_due-date").value,r=wt(vt(o),"dd.MM.yyyy"),s=document.getElementById("modal_new_form_priority").value,d=document.getElementById("modal_new_form_notes").value,l=[],u=document.getElementsByClassName("modal_new_window_subtask");for(var n of u){const t=n.getElementsByClassName("modal_new_window_subtask_text")[0].textContent,e=n.getAttribute("data-finished"),a={};a.text=t,a.finished=e,l.push(a)}const c=document.getElementsByClassName("main_table")[0].getAttribute("data-todo-list");new Wt(e,a,r,o,s,d,l,c),t(Ut,c),i()}})),document.querySelectorAll(".modal_new_form_input").forEach((t=>{t.addEventListener("click",(t=>{r()}))})),document.getElementsByClassName("modal_new_window_subtask-btn")[0].addEventListener("click",(function(t){!function(){const t=document.getElementsByClassName("modal_new_window_middle")[0],e=document.createElement("div");e.classList.add("modal_new_window_subtask");const n=t.getElementsByClassName("modal_new_window_subtask");e.setAttribute("data-subtask",`${n.length}`),e.setAttribute("data-finished",!1);const a=document.createElement("img");a.setAttribute("src","img/checkbox-blank.svg"),a.setAttribute("class","modal_new_window_subtask_checkbox"),a.setAttribute("data-subtask",`${n.length}`);const o=document.createElement("p");o.setAttribute("class","modal_new_window_subtask_text");const i=prompt("What is the sub-task?");null!==i&&""!=i&&(o.textContent=i,document.getElementsByClassName("modal_new_window_header_subtask")[0].classList.remove("display-none"),t.appendChild(e),e.appendChild(a),e.appendChild(o))}()})),document.addEventListener("click",(function(t){if("modal_new_window_subtask"==t.target.className)s(t.target.attributes["data-subtask"].value);else if("modal_new_window_subtask_checkbox"==t.target.className)s(t.target.parentNode.attributes["data-subtask"].value);else{if("modal_new_window_subtask_text"!=t.target.className)return;s(t.target.parentNode.attributes["data-subtask"].value)}})),document.addEventListener("click",(function(t){if("modal_window_subtask"==t.target.className)d(t.target.attributes["data-subtask"].value);else if("modal_window_subtask_checkbox"==t.target.className)d(t.target.parentNode.attributes["data-subtask"].value);else{if("modal_window_subtask_text"!=t.target.className)return;d(t.target.parentNode.attributes["data-subtask"].value)}})),document.getElementsByClassName("modal_window_edit")[0].addEventListener("click",(function(t){const e=document.getElementsByClassName("modal_window")[0].getAttribute("data-todo-list"),n=document.getElementsByClassName("modal_window")[0].getAttribute("data-todo");o(),function(t,e,n){document.getElementsByClassName("modal_edit")[0].classList.remove("display-none");const a=document.getElementById("modal_edit_form_title"),o=document.getElementById("modal_edit_form_description"),i=document.getElementById("modal_edit_form_due-date"),r=document.getElementById("modal_edit_form_priority"),s=document.getElementById("modal_edit_form_notes");if(a.value=t[e].todos[n].title,o.value=t[e].todos[n].description,i.value=t[e].todos[n].dueDateNonFormatted,r.value=t[e].todos[n].priority,s.value=t[e].todos[n].notes,0===t[e].todos[n].subtasks.length)document.getElementsByClassName("modal_edit_window_header_subtask")[0].classList.add("display-none");else if(0!==t[e].todos[n].subtasks.length){document.getElementsByClassName("modal_edit_window_header_subtask")[0].classList.remove("display-none");const a=document.getElementsByClassName("modal_edit_window_middle")[0],o=t[e].todos[n].subtasks;for(let t=0;t<o.length;t++){const e=document.createElement("div");e.setAttribute("data-subtask",t),e.setAttribute("data-finished",o[t].finished),e.classList.add("modal_edit_window_subtask");const n=document.createElement("img");n.setAttribute("src","img/checkbox-blank.svg"),n.setAttribute("data-subtask",t),n.classList.add("modal_edit_window_subtask_checkbox"),e.appendChild(n);const i=document.createElement("p");i.classList.add("modal_edit_window_subtask_text"),i.textContent=o[t].text,e.appendChild(i),"true"==o[t].finished&&(e.classList.add("finished"),n.setAttribute("src","img/checkbox.svg")),a.appendChild(e)}}}(Ut,e,n)})),document.getElementsByClassName("modal_edit_window_close")[0].addEventListener("click",(function(t){u()})),document.addEventListener("click",(function(t){"modal_edit"==t.target.className&&u()})),document.getElementsByClassName("modal_edit_window_subtask-btn")[0].addEventListener("click",(function(t){!function(){const t=document.getElementsByClassName("modal_edit_window_middle")[0],e=document.createElement("div");e.classList.add("modal_edit_window_subtask");const n=t.getElementsByClassName("modal_edit_window_subtask");e.setAttribute("data-subtask",`${n.length}`),e.setAttribute("data-finished",!1);const a=document.createElement("img");a.setAttribute("src","img/checkbox-blank.svg"),a.setAttribute("class","modal_edit_window_subtask_checkbox"),a.setAttribute("data-subtask",`${n.length}`);const o=document.createElement("p");o.setAttribute("class","modal_edit_window_subtask_text");const i=prompt("What is the sub-task?");null!==i&&""!=i&&(o.textContent=i,document.getElementsByClassName("modal_edit_window_header_subtask")[0].classList.remove("display-none"),t.appendChild(e),e.appendChild(a),e.appendChild(o))}()})),document.addEventListener("click",(function(t){if("modal_edit_window_subtask"==t.target.className)c(t.target.attributes["data-subtask"].value);else if("modal-edit_window_subtask_checkbox"==t.target.className)c(t.target.parentNode.attributes["data-subtask"].value);else{if("modal_edit_window_subtask_text"!=t.target.className)return;c(t.target.parentNode.attributes["data-subtask"].value)}})),document.getElementsByClassName("modal_edit_window_add")[0].addEventListener("click",(function(e){if(function(){const t=document.getElementById("modal_edit_form_title"),e=document.getElementById("modal_edit_form_due-date");return""!=t.value&&""!=e.value||(document.getElementsByClassName("modal_edit_window_error")[0].textContent="Please, fill the fields",""==t.value&&(t.style.backgroundColor="pink"),""==e.value&&(e.style.backgroundColor="pink"),!1)}()){const e=document.getElementById("modal_edit_form_title").value,a=document.getElementById("modal_edit_form_description").value,o=document.getElementById("modal_edit_form_due-date").value,i=wt(vt(o),"dd.MM.yyyy"),r=document.getElementById("modal_edit_form_priority").value,s=document.getElementById("modal_edit_form_notes").value,d=[],l=document.getElementsByClassName("modal_edit_window_subtask");for(var n of l){const t=n.getElementsByClassName("modal_edit_window_subtask_text")[0].textContent,e=n.getAttribute("data-finished"),a={};a.text=t,a.finished=e,d.push(a)}const c=document.getElementsByClassName("modal_window")[0].getAttribute("data-todo-list"),m=document.getElementsByClassName("modal_window")[0].getAttribute("data-todo");Ut[c].todos[m].title=e,Ut[c].todos[m].description=a,Ut[c].todos[m].dueDateNonFormatted=o,Ut[c].todos[m].dueDate=i,Ut[c].todos[m].priority=r,Ut[c].todos[m].notes=s,Ut[c].todos[m].subtasks=d,Pt(),t(Ut,c),u()}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,